#!/usr/bin/php
<?php include ("/path_to_logzilla/html/config/config.php");?>
#
# Sphinx configuration file for LogZilla
# Documentation for sphinx can be found at http://sphinxsearch.com/docs/
#

#############################################################################
## indexer settings
#############################################################################
indexer
{
        # See http://sphinxsearch.com/docs/current.html#conf-mem-limit for more information
<?php
foreach(file('/proc/meminfo') as $ri) $m[strtok($ri, ':')] = strtok('');
// 21474836480 = 20G memory
if ($m['MemTotal'] * 1024 > 21474836480) {
    echo "\tmem_limit\t= 512M\n";
    echo "\twrite_buffer\t= 64M\n";
} else {
    echo "mem_limit\t= 128M\n";
    echo "\twrite_buffer\t= 4M\n";
}
?>
}
#############################################################################
## searchd settings
#############################################################################
searchd
{

        listen                          = <?php echo SPHINXHOST.":".SPHINXAPIPORT."\n"; ?>
        listen                          = <?php echo SPHINXHOST.":".SPHINXPORT.":mysql41\n"; ?>
        # Max matches is set to 1000 by default
        # Note that if you make these numbers too high, you may run out of memory
        max_matches                     = 40000
        log                             = /path_to_logs/sphinx_log.log
        query_log                       = /path_to_logs/sphinx_query.log
        query_log_format                = sphinxql
        read_timeout                    = 20
	    client_timeout					= 30
	    read_buffer						= 8M
		dist_threads					= 16
		workers						= threads
    	max_children                    = 30
        ondisk_dict_default             = 1

        seamless_rotate                 = 1
        unlink_old                      = 1
        pid_file                        = /var/run/sphinx_searchd.pid
        compat_sphinxql_magics          = 0
}

#############################################################################
## data source definition
#############################################################################

# nothing essential; only auth data and schema
source s_generic
{
        type                            = mysql
        sql_host                        = <?php echo DBHOST."\n";?>
        sql_user                        = <?php echo DBADMIN."\n";?>
        sql_pass                        = <?php echo DBADMINPW."\n";?>
        sql_db                          = <?php echo DBNAME."\n";?>
        sql_port                        = <?php echo DBPORT."\n";?>     # optional, default is 3306
        sql_range_step      			= 1000000
	    sql_attr_timestamp      		= fo
        sql_attr_timestamp      		= lo
        sql_attr_uint					= counter:11
        sql_attr_uint					= eid
        sql_attr_uint					= facility:7
        sql_attr_uint       			= severity:7
        sql_attr_uint       			= host_crc
#         sql_attr_uint       			= msg_crc
#         sql_attr_uint       			= notes_crc
        sql_attr_uint       			= mne
        sql_attr_uint       			= program
	    sql_query_post                  =
}

source s_logs : s_generic
{
#	sql_query_pre           = UPDATE sph_counter SET max_id= (SELECT MAX(id) FROM logs) WHERE index_name = 'idx_logs'
        sql_query_range         = SELECT 1,1 FROM dual
        # set range step to whatever you like, 1m on larger systems should be ok
        # See http://sphinxsearch.com/docs/current.html#conf-sql-range-step
#        sql_query                       = SELECT \
#                                          id, host, CRC32(host) as host_crc, facility, severity, program, \
#                                          msg, CRC32(msg) AS msg_crc, mne, eid, notes, CRC32(notes) AS notes_crc, counter, UNIX_TIMESTAMP(fo) AS fo, UNIX_TIMESTAMP(lo) AS lo \ 
        sql_query                       = SELECT \
                                          id, 'dummy' as dummy, host, CRC32(host) as host_crc, facility, severity, program, \
                                          msg, mne, eid, counter, UNIX_TIMESTAMP(fo) AS fo, UNIX_TIMESTAMP(lo) AS lo FROM logs \
                                          WHERE id >= $start AND id <= $end
        sql_query_info      = SELECT * FROM logs WHERE id=$id
}

source s_delta_logs : s_logs
{
# [[ticket:308]] This empty pre query MUST be here!
    sql_query_pre    = #
    sql_query_range  = SELECT greatest(max_id, 1), (SELECT MAX(id) FROM logs) \
                       FROM sph_counter WHERE index_name = 'idx_logs' 
}


#############################################################################
## index definition
#############################################################################
index idx_logs
{
        source                  = s_logs
        path                    = <?php echo PATHTOLOGZILLA; ?>/sphinx/data/idx_logs
        docinfo                 = inline
        min_word_len            = 3
        # removed charset type so that it defaults to sbcs
        # ref: http://sphinxsearch.com/docs/current.html#conf-charset-type
        #charset_type            = utf-8
        # The charset table below is set to include periods (.) and @'s so that ip addresses and email addresses get indexed as a single, searchable, word.
        # charset_table = 0..9, A..Z->a..z, _, a..z, U+A8->U+B8, U+B8, U+C0..U+DF->U+E0..U+FF, U+E0..U+FF, U+2E, U+2D, U+40, U+3D
        # Fix for #126 - added "/", "(" and ")" to charset table below:
        charset_table = 0..9, A..Z->a..z, _, a..z, U+A8->U+B8, U+B8, U+C0..U+DF->U+E0..U+FF, U+E0..U+FF, U+2E, U+2D, U+40, U+3D, U+002F, U+0028, U+0029

		mlock			= 0 
		agent_query_timeout 	= 60000
		agent_connect_timeout 	= 20000
		preopen 		= 1              
        ondisk_dict = 1
            # min-prefix will enable wildcard matches but will *drastically* increase the index sizes
            # ref: http://sphinxsearch.com/docs/current.html#conf-enable-star
         	enable_star            =  1
            min_prefix_len         =  4
            prefix_fields          = msg
            dict                  = keywords

}

index idx_delta_logs : idx_logs
{
        source                  = s_delta_logs
        path                    = <?php echo PATHTOLOGZILLA; ?>/sphinx/data/idx_delta_logs
        docinfo               = extern
}


<?php

    $db=new mysqli(DBHOST,DBADMIN,DBADMINPW,DBNAME,DBPORT);
    if ($db->connect_errno)
        {
           printf("Unable to connect to mysql. Error: %d %s\n", $db->connect_errno, $db->connect_error);
           exit;
        }
    $rtables = $db->query ("SHOW TABLES LIKE 'log_arch%'");
    $result =  $db->query ("select value from settings where name='SPX_CPU_CORES'");
    $c = $result->fetch_array(MYSQLI_NUM);
    $cores =intval($c[0]);
    $have_daily=0;
    $logs = array();
    $logs_hr = array();
    $logs_dl = array();
    $localtime_assoc = localtime(time(), true);
    if ($rtables !== FALSE)
    {
        while ( $table = $rtables->fetch_array() )
        {
            if ( preg_match ( "/^log_arch_/",$table[0]))
                    $logs[] = $table[0];
            if ( preg_match ( "/^log_arch_hr_/",$table[0]))
                    $logs_hr[] = "idx_$table[0]";
            if ( preg_match ( "/^log_arch_day_/",$table[0]))
               {      $logs_dl[] = "idx_$table[0]";  $have_daily=1;   }
	}
        $rtables->close();
    }
    $i=0;
    while ($i < $cores ) {

    // out all the sources
    foreach ($logs as $source)
    {
        echo "source s_idx_".$source."_".$i." : s_logs\n";
        echo "{\n";
        echo "\tsql_query_range	    = SELECT min_id, max_id  FROM view_limits where view_name='$source'\n";
        echo "\tsql_query           = SELECT \
                                          id, 'dummy' as dummy, host, CRC32(host) as host_crc, facility, severity, program, \
                                          msg, mne, eid, counter, UNIX_TIMESTAMP(fo) AS fo, UNIX_TIMESTAMP(lo) AS lo \
                                          FROM $source \
                                          WHERE  id >= \$start AND id <= \$end and (id % $cores = $i )\n";
        echo "\tsql_query_info      = SELECT * FROM $source WHERE id=\$id\n";
        echo "}\n\n";

    }

    // out all the elementary indexes
    foreach ($logs_dl as $source)
    {
        echo "index ".$source."_".$i." : idx_logs\n";
        echo "{\n";
        echo "  source          = s_".$source."_".$i."\n";
        echo "  path            = ".PATHTOLOGZILLA."/sphinx/data/".$source."_".$i."\n";
        echo "}\n\n";
    }

    $j=0;

    while ($j <= ($localtime_assoc['tm_hour']-1)) {
        echo "index idx_log_arch_hr_".$j."_".$i." : idx_logs\n";
        echo "{\n";
        echo "  source          = s_idx_log_arch_hr_".$j."_".$i."\n";
        echo "  path            = ".PATHTOLOGZILLA."/sphinx/data/idx_log_arch_hr_".$j."_".$i."\n";
        // To calculate amount of RAM needed for in-memory indexes:
        // (MoE*4)/100 = GB of RAM Needed to hold them in memory where MoE = Millions of Events.
        // e.g.: (500*4)/100 = 22GB Ram needed to store 500 Million events in memory
        // So if your server can't handle this, then don't use extern 
        echo "  docinfo = extern \n";
        echo "}\n\n";

    $j++;       }

    $j=1;
    while ($j <= (floor($localtime_assoc['tm_min'] / 15))) {
        echo "index idx_log_arch_qrhr_".($j*15)."_".$i." : idx_logs\n";
        echo "{\n";
        echo "  source = s_idx_log_arch_qrhr_".($j*15)."_".$i."\n";
        echo "  path            = ".PATHTOLOGZILLA."/sphinx/data/idx_log_arch_qrhr_".($j*15)."_".$i."\n";
        echo "  docinfo = extern \n";
        echo "}\n\n";
 
    $j++;      }


 $i++; 	}


    // make different distributed indexes
    // idx_last_24h now only have data from midnight till (almost) now
    echo "index idx_last_24h\n";
    echo "{\n";
    echo "  type = distributed\n";

    $i=0;
    while ($i < $cores) {

    $j=1;
    while ($j <= (floor($localtime_assoc['tm_min'] / 15))) {
    echo "  local = idx_log_arch_qrhr_".($j*15)."_".$i."\n";   
    $j++; 	}

    $j=0;
    while ($j <= ($localtime_assoc['tm_hour']-1)) {
    echo "  local = idx_log_arch_hr_".$j."_".$i."\n";
    $j++;       }

    $i++; 	}

    echo "  local = idx_delta_logs\n";
    echo "}\n\n";


    echo "index distributed\n";
    echo "{\n";
    echo "  type = distributed\n";   

    $i=0;
    while ($i < $cores ) {

    $j=1;
    while ($j <= (floor($localtime_assoc['tm_min'] / 15))) {
    echo "  local = idx_log_arch_qrhr_".($j*15)."_".$i."\n";   
    $j++; 	}

    $j=0;
    while ($j <= ($localtime_assoc['tm_hour']-1)) {
    echo "  local = idx_log_arch_hr_".$j."_".$i."\n";   
    $j++; 	}

    if  ( $have_daily == 1 ) {
    foreach ($logs_dl as $local)
        echo "  local = ".$local."_".$i."\n";
    }
    $i++; 	}
    echo "  local = idx_delta_logs\n";
    echo "}\n\n";

    if  ( $have_daily == 1) {
    foreach ($logs_dl as $local) {
    echo "index ".$local."\n";
    echo "{\n";
    echo "  type = distributed\n";
    $i=0;
    while ($i < $cores ) {
         echo "  local = ".$local."_".$i."\n";
    $i++;   }
    echo "}\n\n";
    }
    }

?>
